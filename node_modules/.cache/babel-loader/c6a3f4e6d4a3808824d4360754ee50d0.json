{"ast":null,"code":"var _jsxFileName = \"/home/spiced/spiced/spiced-final-project/src/components/MidiControls/MidiControls.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { SET_MIDI_INPUTS } from '../../reducers/types';\nimport { updateEditorData, handlePadTrigger } from '../../actions';\nimport { Context } from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport '../Controls/Controls.css';\nimport midiMap from '../../Config/midiMap';\nexport default (function (props) {\n  var context = useContext(Context);\n\n  var renderSelectOptions = function renderSelectOptions() {\n    if (!context.midiInputs) return;else return context.midiInputs.map(function (input) {\n      return React.createElement(\"option\", {\n        key: input.id,\n        id: input.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, input.name);\n    });\n  };\n\n  var renderMidiDeviceSelector = function renderMidiDeviceSelector() {\n    if (!context.midiInputs) return React.createElement(\"span\", {\n      className: \"disable-text-select\",\n      role: \"img\",\n      \"aria-label\": \"no midi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"\\uD83D\\uDEAB\\uD83C\\uDFB9\");\n    return React.createElement(\"select\", {\n      className: \"ctl-select\",\n      style: {\n        color: Colors.white\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, renderSelectOptions());\n  };\n\n  var addMidiListeners = function addMidiListeners() {\n    context.midiInputs.forEach(function (input) {\n      input.onmidimessage = function (e) {\n        // console.log(e);\n        var cmd = e.data[0];\n        var note = e.data[1];\n        var velocity = e.data[2];\n        if (!midiMap[note]) return;\n\n        if (midiMap[note].cc === \"note\" && cmd - context.midiChannel === 144) {\n          handlePadTrigger(context, midiMap[note].padId, velocity);\n        }\n\n        if (midiMap[note].cc === \"gain\") {\n          var gain = Math.pow(velocity, 2) / Math.pow(127, 2);\n          updateEditorData({\n            context: context,\n            cmd: \"gain\",\n            val: gain\n          });\n        }\n\n        if (midiMap[note].cc === \"detune\") {\n          var detune = Math.round(Math.pow(velocity, 2) / Math.pow(127, 2) * Math.pow(10, 3));\n          updateEditorData({\n            context: context,\n            cmd: \"detune\",\n            val: detune\n          });\n        }\n\n        if (midiMap[note].cc === \"sampleStart\") {\n          var sourceAvailable = context.gridPadsArr[context.selectedPad].source;\n          if (!sourceAvailable || !sourceAvailable.buffer) return;\n          var start = Math.pow(velocity, 2) / Math.pow(127, 2) * sourceAvailable.buffer.duration;\n          updateEditorData({\n            context: context,\n            cmd: \"start\",\n            val: start\n          });\n        }\n\n        if (midiMap[note].cc === \"sampleEnd\") {\n          var _sourceAvailable = context.gridPadsArr[context.selectedPad].source;\n          if (!_sourceAvailable || !_sourceAvailable.buffer) return;\n\n          var end = Math.pow(velocity, 2) / Math.pow(127, 2) * _sourceAvailable.buffer.duration;\n\n          updateEditorData({\n            context: context,\n            cmd: \"end\",\n            val: end\n          });\n        }\n      };\n    });\n  };\n\n  var setMidiInputs = function setMidiInputs(midiInputs) {\n    context.dispatch({\n      type: SET_MIDI_INPUTS,\n      payload: {\n        midiInputs: midiInputs\n      }\n    });\n  };\n\n  var getMidiDevices = function getMidiDevices() {\n    navigator.requestMIDIAccess().then(function (access) {\n      var inputs = access.inputs.entries().next().value; // let outputs = access.outputs;\n\n      access.onstatechange = function (e) {\n        console.log(e.port.name, e.port.manufacturer, e.port.state);\n      };\n\n      var filteredInputs = inputs.filter(function (input) {\n        return typeof input === \"object\";\n      });\n      setMidiInputs(filteredInputs);\n    }).catch(function (err) {\n      setMidiInputs(null);\n    });\n  };\n\n  useEffect(function () {\n    if (context.midiEnabled || !context.midiInputs) getMidiDevices();\n    if (!context.midiInputs) return;\n  }, []);\n  if (context.midiInputs) addMidiListeners();\n  return React.createElement(\"div\", {\n    className: \"ctl-select-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, renderMidiDeviceSelector());\n});","map":{"version":3,"sources":["/home/spiced/spiced/spiced-final-project/src/components/MidiControls/MidiControls.js"],"names":["React","useContext","useEffect","SET_MIDI_INPUTS","updateEditorData","handlePadTrigger","Context","Colors","midiMap","props","context","renderSelectOptions","midiInputs","map","input","id","name","renderMidiDeviceSelector","color","white","addMidiListeners","forEach","onmidimessage","e","cmd","data","note","velocity","cc","midiChannel","padId","gain","Math","pow","val","detune","round","sourceAvailable","gridPadsArr","selectedPad","source","buffer","start","duration","end","setMidiInputs","dispatch","type","payload","getMidiDevices","navigator","requestMIDIAccess","then","access","inputs","entries","next","value","onstatechange","console","log","port","manufacturer","state","filteredInputs","filter","catch","err","midiEnabled"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from 'react';\nimport {SET_MIDI_INPUTS} from '../../reducers/types'; \nimport {updateEditorData, handlePadTrigger} from '../../actions'\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport '../Controls/Controls.css';\nimport midiMap from '../../Config/midiMap';\n\nexport default (props) => {\n    let context = useContext(Context);\n    const renderSelectOptions = () => {\n        if(!context.midiInputs) return \n        else return context.midiInputs.map(input => {\n            return <option key={input.id} id={input.id}>{input.name}</option>\n        })\n    }\n    const renderMidiDeviceSelector = () => {\n        if(!context.midiInputs) return <span className=\"disable-text-select\" role=\"img\" aria-label=\"no midi\">🚫🎹</span>\n        return(\n            <select className=\"ctl-select\" style={{color: Colors.white}}>\n                {renderSelectOptions()}\n            </select>\n        )\n    }\n    const addMidiListeners = () => {\n        context.midiInputs.forEach(input => {\n            input.onmidimessage = (e) => {\n                // console.log(e);\n                let cmd = e.data[0];\n                let note = e.data[1];\n                let velocity = e.data[2];\n                if(!midiMap[note]) return\n                if(midiMap[note].cc === \"note\" && cmd - context.midiChannel === 144){\n                    handlePadTrigger(context, midiMap[note].padId, velocity)\n                }\n                if(midiMap[note].cc === \"gain\"){\n                    let gain = Math.pow(velocity, 2) / Math.pow(127, 2);\n                    updateEditorData({context, cmd: \"gain\", val: gain});\n                }\n                if(midiMap[note].cc === \"detune\"){\n                    let detune = Math.round(Math.pow(velocity, 2) / Math.pow(127, 2) * Math.pow(10, 3));\n                    updateEditorData({context, cmd: \"detune\", val: detune});\n                }\n                if(midiMap[note].cc === \"sampleStart\"){\n                    let sourceAvailable = context.gridPadsArr[context.selectedPad].source\n                    if(!sourceAvailable || !sourceAvailable.buffer) return\n                    let start = Math.pow(velocity, 2) / Math.pow(127, 2) * sourceAvailable.buffer.duration\n                    updateEditorData({context, cmd: \"start\", val: start});\n                }\n                if(midiMap[note].cc === \"sampleEnd\"){\n                    let sourceAvailable = context.gridPadsArr[context.selectedPad].source\n                    if(!sourceAvailable || !sourceAvailable.buffer) return\n                    let end = Math.pow(velocity, 2) / Math.pow(127, 2) * sourceAvailable.buffer.duration\n                    updateEditorData({context, cmd: \"end\", val: end});\n                }\n            }\n        });\n    }\n    const setMidiInputs = (midiInputs) => {\n        context.dispatch({type: SET_MIDI_INPUTS, payload: {midiInputs}})\n    }\n    const getMidiDevices = () => {\n        navigator.requestMIDIAccess()\n        .then((access) => {\n            let inputs = access.inputs.entries().next().value;\n            // let outputs = access.outputs;\n            access.onstatechange = (e) => {\n                console.log(e.port.name, e.port.manufacturer, e.port.state);\n            } \n            let filteredInputs = inputs.filter(input => typeof(input) === \"object\")\n            setMidiInputs(filteredInputs);\n        })\n        .catch(err => {\n            setMidiInputs(null);\n        })\n    }\n\n    useEffect(() => {\n        if(context.midiEnabled || !context.midiInputs) getMidiDevices();\n        if(!context.midiInputs) return\n            \n    }, []);\n    if(context.midiInputs) addMidiListeners()\n    return (\n        <div className=\"ctl-select-wrapper\">\n            {renderMidiDeviceSelector()}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}