{"ast":null,"code":"/*!\n * http-errors\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('http-errors');\n\nvar setPrototypeOf = require('setprototypeof');\n\nvar statuses = require('statuses');\n\nvar inherits = require('inherits');\n\nvar toIdentifier = require('toidentifier');\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = createError;\nmodule.exports.HttpError = createHttpErrorConstructor(); // Populate exports for all constructors\n\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError);\n/**\n * Get the code class of a status code.\n * @private\n */\n\nfunction codeClass(status) {\n  return Number(String(status).charAt(0) + '00');\n}\n/**\n * Create a new HTTP Error.\n *\n * @returns {Error}\n * @public\n */\n\n\nfunction createError() {\n  // so much arity going on ~_~\n  var err;\n  var msg;\n  var status = 500;\n  var props = {};\n\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n\n    if (arg instanceof Error) {\n      err = arg;\n      status = err.status || err.statusCode || status;\n      continue;\n    }\n\n    switch (typeof arg) {\n      case 'string':\n        msg = arg;\n        break;\n\n      case 'number':\n        status = arg;\n\n        if (i !== 0) {\n          deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)');\n        }\n\n        break;\n\n      case 'object':\n        props = arg;\n        break;\n    }\n  }\n\n  if (typeof status === 'number' && (status < 400 || status >= 600)) {\n    deprecate('non-error status code; use only 4xx or 5xx status codes');\n  }\n\n  if (typeof status !== 'number' || !statuses[status] && (status < 400 || status >= 600)) {\n    status = 500;\n  } // constructor\n\n\n  var HttpError = createError[status] || createError[codeClass(status)];\n\n  if (!err) {\n    // create error\n    err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);\n    Error.captureStackTrace(err, createError);\n  }\n\n  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\n    // add properties to generic error\n    err.expose = status < 500;\n    err.status = err.statusCode = status;\n  }\n\n  for (var key in props) {\n    if (key !== 'status' && key !== 'statusCode') {\n      err[key] = props[key];\n    }\n  }\n\n  return err;\n}\n/**\n * Create HTTP error abstract base class.\n * @private\n */\n\n\nfunction createHttpErrorConstructor() {\n  function HttpError() {\n    throw new TypeError('cannot construct abstract class');\n  }\n\n  inherits(HttpError, Error);\n  return HttpError;\n}\n/**\n * Create a constructor for a client error.\n * @private\n */\n\n\nfunction createClientErrorConstructor(HttpError, name, code) {\n  var className = name.match(/Error$/) ? name : name + 'Error';\n\n  function ClientError(message) {\n    // create the error object\n    var msg = message != null ? message : statuses[code];\n    var err = new Error(msg); // capture a stack trace to the construction point\n\n    Error.captureStackTrace(err, ClientError); // adjust the [[Prototype]]\n\n    setPrototypeOf(err, ClientError.prototype); // redefine the error message\n\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    }); // redefine the error name\n\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n\n  inherits(ClientError, HttpError);\n  nameFunc(ClientError, className);\n  ClientError.prototype.status = code;\n  ClientError.prototype.statusCode = code;\n  ClientError.prototype.expose = true;\n  return ClientError;\n}\n/**\n * Create a constructor for a server error.\n * @private\n */\n\n\nfunction createServerErrorConstructor(HttpError, name, code) {\n  var className = name.match(/Error$/) ? name : name + 'Error';\n\n  function ServerError(message) {\n    // create the error object\n    var msg = message != null ? message : statuses[code];\n    var err = new Error(msg); // capture a stack trace to the construction point\n\n    Error.captureStackTrace(err, ServerError); // adjust the [[Prototype]]\n\n    setPrototypeOf(err, ServerError.prototype); // redefine the error message\n\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    }); // redefine the error name\n\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n\n  inherits(ServerError, HttpError);\n  nameFunc(ServerError, className);\n  ServerError.prototype.status = code;\n  ServerError.prototype.statusCode = code;\n  ServerError.prototype.expose = false;\n  return ServerError;\n}\n/**\n * Set the name of a function, if possible.\n * @private\n */\n\n\nfunction nameFunc(func, name) {\n  var desc = Object.getOwnPropertyDescriptor(func, 'name');\n\n  if (desc && desc.configurable) {\n    desc.value = name;\n    Object.defineProperty(func, 'name', desc);\n  }\n}\n/**\n * Populate the exports object with constructors for every error class.\n * @private\n */\n\n\nfunction populateConstructorExports(exports, codes, HttpError) {\n  codes.forEach(function forEachCode(code) {\n    var CodeError;\n    var name = toIdentifier(statuses[code]);\n\n    switch (codeClass(code)) {\n      case 400:\n        CodeError = createClientErrorConstructor(HttpError, name, code);\n        break;\n\n      case 500:\n        CodeError = createServerErrorConstructor(HttpError, name, code);\n        break;\n    }\n\n    if (CodeError) {\n      // export the constructor\n      exports[code] = CodeError;\n      exports[name] = CodeError;\n    }\n  }); // backwards-compatibility\n\n  exports[\"I'mateapot\"] = deprecate.function(exports.ImATeapot, '\"I\\'mateapot\"; use \"ImATeapot\" instead');\n}","map":null,"metadata":{},"sourceType":"script"}