{"ast":null,"code":"var _jsxFileName = \"/home/spiced/spiced/sampler2/Sampler/src/components/PadEditorItem/MonitorButton.js\";\nimport React, { useContext } from 'react';\nimport { Context } from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorButtons.css';\nimport { TOGGLE_DIRECT_MONITOR } from '../../reducers/types';\nvar style = {\n  background: Colors.gray,\n  color: Colors.red,\n  width: \"90%\",\n  textAlign: \"center\",\n  border: \"1px solid \".concat(Colors.white),\n  display: \"grid\",\n  gridTemplateRows: \"1fr\",\n  gridTemplateColumns: \"1fr\",\n  justifyContent: \"center\",\n  margin: \"1vh auto\"\n};\nexport default (function () {\n  var context = useContext(Context);\n\n  var renderButtonContent = function renderButtonContent() {\n    var content = context.isMonitoring ? \"MUTE\" : \"MON\";\n    return content;\n  };\n\n  var toggleDirectMonitor = function toggleDirectMonitor() {\n    if (!context.monitor) return;\n    var isMonitoring = !context.isMonitoring;\n\n    if (isMonitoring) {\n      context.monitor.connect(context.ctx.destination);\n    } else {\n      context.monitor.disconnect();\n    }\n\n    context.dispatch({\n      type: TOGGLE_DIRECT_MONITOR,\n      payload: {\n        isMonitoring: isMonitoring\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"pad-item-wrapper\",\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"editor-btn\",\n    id: \"monitor\",\n    onClick: function onClick(e) {\n      toggleDirectMonitor();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, renderButtonContent()));\n});","map":{"version":3,"sources":["/home/spiced/spiced/sampler2/Sampler/src/components/PadEditorItem/MonitorButton.js"],"names":["React","useContext","Context","Colors","TOGGLE_DIRECT_MONITOR","style","background","gray","color","red","width","textAlign","border","white","display","gridTemplateRows","gridTemplateColumns","justifyContent","margin","context","renderButtonContent","content","isMonitoring","toggleDirectMonitor","monitor","connect","ctx","destination","disconnect","dispatch","type","payload","e"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,OAAR,QAAsB,+BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAO,wBAAP;AACA,SAAQC,qBAAR,QAAoC,sBAApC;AACA,IAAIC,KAAK,GAAG;AACRC,EAAAA,UAAU,EAAEH,MAAM,CAACI,IADX;AAERC,EAAAA,KAAK,EAAEL,MAAM,CAACM,GAFN;AAGRC,EAAAA,KAAK,EAAE,KAHC;AAIRC,EAAAA,SAAS,EAAE,QAJH;AAKRC,EAAAA,MAAM,sBAAeT,MAAM,CAACU,KAAtB,CALE;AAMRC,EAAAA,OAAO,EAAE,MAND;AAORC,EAAAA,gBAAgB,EAAE,KAPV;AAQRC,EAAAA,mBAAmB,EAAE,KARb;AASRC,EAAAA,cAAc,EAAE,QATR;AAURC,EAAAA,MAAM,EAAE;AAVA,CAAZ;AAaA,gBAAe,YAAM;AACjB,MAAMC,OAAO,GAAGlB,UAAU,CAACC,OAAD,CAA1B;;AACA,MAAMkB,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,QAAIC,OAAO,GAAGF,OAAO,CAACG,YAAR,GAAuB,MAAvB,GAAgC,KAA9C;AACA,WAAOD,OAAP;AACH,GAHD;;AAIA,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,QAAG,CAACJ,OAAO,CAACK,OAAZ,EAAqB;AACrB,QAAIF,YAAY,GAAG,CAACH,OAAO,CAACG,YAA5B;;AACA,QAAGA,YAAH,EAAgB;AACZH,MAAAA,OAAO,CAACK,OAAR,CAAgBC,OAAhB,CAAwBN,OAAO,CAACO,GAAR,CAAYC,WAApC;AACH,KAFD,MAEO;AACHR,MAAAA,OAAO,CAACK,OAAR,CAAgBI,UAAhB;AACH;;AACDT,IAAAA,OAAO,CAACU,QAAR,CAAiB;AAACC,MAAAA,IAAI,EAAE1B,qBAAP;AAA8B2B,MAAAA,OAAO,EAAE;AAACT,QAAAA,YAAY,EAAZA;AAAD;AAAvC,KAAjB;AACH,GATD;;AAUA,SACI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,KAAK,EAAEjB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,EAAE,EAAC,SAAlC;AAA4C,IAAA,OAAO,EAAE,iBAAC2B,CAAD,EAAO;AAAET,MAAAA,mBAAmB;AAAG,KAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,mBAAmB,EADxB,CADJ,CADJ;AAOH,CAvBD","sourcesContent":["import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorButtons.css';\nimport {TOGGLE_DIRECT_MONITOR} from '../../reducers/types';\nlet style = { \n    background: Colors.gray, \n    color: Colors.red, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr\",\n    gridTemplateColumns: \"1fr\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\"\n}\n\nexport default () => {\n    const context = useContext(Context);\n    const renderButtonContent = () => {\n        let content = context.isMonitoring ? \"MUTE\" : \"MON\";\n        return content;\n    }\n    const toggleDirectMonitor = () => {\n        if(!context.monitor) return;\n        let isMonitoring = !context.isMonitoring\n        if(isMonitoring){\n            context.monitor.connect(context.ctx.destination);\n        } else {\n            context.monitor.disconnect();\n        }\n        context.dispatch({type: TOGGLE_DIRECT_MONITOR, payload: {isMonitoring}});\n    }    \n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            <button className=\"editor-btn\" id=\"monitor\" onClick={(e) => { toggleDirectMonitor()}}>\n                {renderButtonContent()}\n            </button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}