{"ast":null,"code":"var _jsxFileName = \"/home/spiced/spiced/spiced-final-project/src/components/Pad/Pad.js\";\nimport React, { useContext } from \"react\";\nimport SamplerGrid from \"../SamplerGrid/SamplerGrid\";\nimport EditorItemRange from \"../PadEditorItem/EditorItemRange\";\nimport { Context } from \"../../contexts/SamplerContext\";\nimport { handlePadTrigger } from \"../../actions\";\nimport Colors from \"../../Config/ColorScheme\";\nimport ColorSelector from \"../ColorSelector/ColorSelector\";\nimport touchCTRL from \"../../Config/touchControls\";\nimport \"./Pad.css\";\nimport { setCTX } from \"../../actions\";\nexport default (function (props) {\n  var context = useContext(Context);\n  var currentPad = context.gridPadsArr[props.id];\n  var selectedPad = context.gridPadsArr[context.selectedPad];\n  var max = 0;\n  var source = context.gridPadsArr[context.selectedPad].source;\n  var borderColor = currentPad.source ? currentPad.color : Colors.gray;\n  var color = props.id === context.selectedPad ? currentPad.color : Colors.black;\n\n  var handleTouchStart = function handleTouchStart(padId) {\n    if (!touchCTRL[padId].hold) {\n      touchCTRL[padId].hold = true;\n      handlePadTrigger(context, padId);\n    }\n  };\n\n  var handleTouchEnd = function handleTouchEnd(padId) {\n    touchCTRL[padId].hold = false;\n  };\n\n  var handleMouseClick = function handleMouseClick(padId) {\n    if (!context.touchEnabled) {\n      handlePadTrigger(context, padId);\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"pad\",\n    id: props.id,\n    style: {\n      backgroundColor: color,\n      color: Colors.white,\n      transition: \"0.25s linear\"\n    },\n    onClick: function onClick() {\n      handleMouseClick(props.id);\n    },\n    onDoubleClick: function onDoubleClick(e) {\n      return e.preventDefault();\n    },\n    onTouchStart: function onTouchStart(e) {\n      handleTouchStart(props.id, e);\n    },\n    onTouchEnd: function onTouchEnd(e) {\n      handleTouchEnd(props.id, e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"pad-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, props.midiNote)));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"editor-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(EditorItemRange, {\n    label: \"start\",\n    value: selectedPad.sampleStart,\n    max: max,\n    step: 0.001,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"end\",\n    value: selectedPad.sampleEnd,\n    max: max,\n    step: 0.001,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"gain\",\n    value: context.gridPadsArr[context.selectedPad].currentGain,\n    max: 1,\n    step: 0.01,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"detune\",\n    value: context.gridPadsArr[context.selectedPad].detune,\n    step: 25,\n    min: 0,\n    max: 1000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(ColorSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"placeholder3\",\n    value: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })));\n});","map":{"version":3,"sources":["/home/spiced/spiced/spiced-final-project/src/components/Pad/Pad.js"],"names":["React","useContext","SamplerGrid","EditorItemRange","Context","handlePadTrigger","Colors","ColorSelector","touchCTRL","setCTX","props","context","currentPad","gridPadsArr","id","selectedPad","max","source","borderColor","color","gray","black","handleTouchStart","padId","hold","handleTouchEnd","handleMouseClick","touchEnabled","backgroundColor","white","transition","e","preventDefault","midiNote","sampleStart","sampleEnd","currentGain","detune"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport SamplerGrid from \"../SamplerGrid/SamplerGrid\";\nimport EditorItemRange from \"../PadEditorItem/EditorItemRange\";\nimport { Context } from \"../../contexts/SamplerContext\";\nimport { handlePadTrigger } from \"../../actions\";\nimport Colors from \"../../Config/ColorScheme\";\nimport ColorSelector from \"../ColorSelector/ColorSelector\";\nimport touchCTRL from \"../../Config/touchControls\";\nimport \"./Pad.css\";\nimport { setCTX } from \"../../actions\";\n\nexport default props => {\n  const context = useContext(Context);\n  let currentPad = context.gridPadsArr[props.id];\n  let selectedPad = context.gridPadsArr[context.selectedPad];\n  let max = 0;\n  let source = context.gridPadsArr[context.selectedPad].source;\n  let borderColor = currentPad.source ? currentPad.color : Colors.gray;\n  let color =\n    props.id === context.selectedPad ? currentPad.color : Colors.black;\n  const handleTouchStart = padId => {\n    if (!touchCTRL[padId].hold) {\n      touchCTRL[padId].hold = true;\n      handlePadTrigger(context, padId);\n    }\n  };\n  const handleTouchEnd = padId => {\n    touchCTRL[padId].hold = false;\n  };\n  const handleMouseClick = padId => {\n    if (!context.touchEnabled) {\n      handlePadTrigger(context, padId);\n    }\n  };\n  return (\n    <React.Fragment>\n      <div\n        className=\"pad\"\n        id={props.id}\n        style={{\n          backgroundColor: color,\n          color: Colors.white,\n          transition: \"0.25s linear\"\n        }}\n        onClick={() => {\n          handleMouseClick(props.id);\n        }}\n        onDoubleClick={e => e.preventDefault()}\n        onTouchStart={e => {\n          handleTouchStart(props.id, e);\n        }}\n        onTouchEnd={e => {\n          handleTouchEnd(props.id, e);\n        }}\n      >\n        <span className=\"pad-text\">{props.midiNote}</span>\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <React.Fragment>\n      <div className=\"editor-wrapper\">\n        <EditorItemRange\n          label=\"start\"\n          value={selectedPad.sampleStart}\n          max={max}\n          step={0.001}\n        />\n        <EditorItemRange\n          label=\"end\"\n          value={selectedPad.sampleEnd}\n          max={max}\n          step={0.001}\n        />\n        <EditorItemRange\n          label=\"gain\"\n          value={context.gridPadsArr[context.selectedPad].currentGain}\n          max={1}\n          step={0.01}\n        />\n        <EditorItemRange\n          label=\"detune\"\n          value={context.gridPadsArr[context.selectedPad].detune}\n          step={25}\n          min={0}\n          max={1000}\n        />\n        <ColorSelector />\n        <EditorItemRange label=\"placeholder3\" value={0} />\n      </div>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}