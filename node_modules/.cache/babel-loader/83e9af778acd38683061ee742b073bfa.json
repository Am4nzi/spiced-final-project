{"ast":null,"code":"var _jsxFileName = \"/home/spiced/spiced/spiced-final-project/src/components/PadEditor/PadEditor.js\";\nimport React, { useContext } from 'react';\nimport { Context } from '../../contexts/SamplerContext';\nimport EditorItemRange from '../PadEditorItem/EditorItemRange';\nimport EditorItemButtons from '../PadEditorItem/EditorItemButtons';\nimport EditorItemButton from '../PadEditorItem/EditorItemButton';\nimport RecordButton from '../PadEditorItem/RecordButton';\nimport MonitorButton from '../PadEditorItem/MonitorButton';\nimport ColorSelector from '../ColorSelector/ColorSelector';\nimport './PadEditor.css';\nexport default (function () {\n  var context = useContext(Context);\n  var selectedPad = context.gridPadsArr[context.selectedPad];\n  var max = 0;\n  var source = context.gridPadsArr[context.selectedPad].source;\n\n  if (source && source.buffer) {\n    max = source.buffer.duration;\n  }\n\n  if (context.recMode) {\n    return React.createElement(\"div\", {\n      className: \"editor-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(EditorItemButton, {\n      cmd: \"play\",\n      content: \"\\u25BA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(RecordButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(MonitorButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"editor-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(EditorItemButtons, {\n      cmd1: \"prev\",\n      cmd2: \"next\",\n      content1: \"\\u25C4\",\n      content2: \"\\u25BA\",\n      val1: -1,\n      val2: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(EditorItemButton, {\n      cmd: \"play\",\n      content: \"\\u25BA\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"start\",\n      value: selectedPad.sampleStart,\n      max: max,\n      step: 0.001,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"end\",\n      value: selectedPad.sampleEnd,\n      max: max,\n      step: 0.001,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"gain\",\n      value: context.gridPadsArr[context.selectedPad].currentGain,\n      max: 1,\n      step: 0.01,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"detune\",\n      value: context.gridPadsArr[context.selectedPad].detune,\n      step: 25,\n      min: 0,\n      max: 1000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(ColorSelector, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"placeholder3\",\n      value: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n});","map":{"version":3,"sources":["/home/spiced/spiced/spiced-final-project/src/components/PadEditor/PadEditor.js"],"names":["React","useContext","Context","EditorItemRange","EditorItemButtons","EditorItemButton","RecordButton","MonitorButton","ColorSelector","context","selectedPad","gridPadsArr","max","source","buffer","duration","recMode","sampleStart","sampleEnd","currentGain","detune"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport EditorItemRange from '../PadEditorItem/EditorItemRange';\nimport EditorItemButtons from '../PadEditorItem/EditorItemButtons';\nimport EditorItemButton from '../PadEditorItem/EditorItemButton';\nimport RecordButton from '../PadEditorItem/RecordButton';\nimport MonitorButton from '../PadEditorItem/MonitorButton';\nimport ColorSelector from '../ColorSelector/ColorSelector';\n\nimport './PadEditor.css';\n\nexport default () => {\n    const context = useContext(Context);\n    let selectedPad = context.gridPadsArr[context.selectedPad];\n    let max = 0;\n    let source = context.gridPadsArr[context.selectedPad].source;\n    if(source && source.buffer ){\n        max = source.buffer.duration;\n    }\n    if(context.recMode){\n        return (\n            <div className=\"editor-wrapper\">\n        \n                <EditorItemButton cmd=\"play\" content=\"►\" />\n                <RecordButton />\n                <MonitorButton />\n            </div>\n        )\n    } else {\n        return(\n            <div className=\"editor-wrapper\">\n                <EditorItemButtons cmd1=\"prev\" cmd2=\"next\" content1=\"◄\" content2=\"►\" val1={-1} val2={1} />\n                <EditorItemButton cmd=\"play\" content=\"►\" />\n                <EditorItemRange label=\"start\" value={selectedPad.sampleStart} max={max} step={0.001} />\n                <EditorItemRange label=\"end\" value={selectedPad.sampleEnd} max={max} step={0.001} />\n                <EditorItemRange label=\"gain\" value={context.gridPadsArr[context.selectedPad].currentGain} max={1} step={0.01} />\n                <EditorItemRange label=\"detune\" value={context.gridPadsArr[context.selectedPad].detune} step={25} min={0} max={1000} />\n                <ColorSelector />\n                <EditorItemRange label=\"placeholder3\" value={0} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}