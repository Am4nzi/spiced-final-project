{"ast":null,"code":"import _toConsumableArray from \"/home/spiced/spiced/spiced-final-project/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/spiced/spiced/spiced-final-project/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/spiced/spiced/spiced-final-project/src/components/Controls/Controls.js\";\nimport React, { useContext } from 'react';\nimport { TOGGLE_REC_MODE, CLEAR_SELECTED_PAD, TOGGLE_EDIT_MODE } from '../../reducers/types';\nimport { updateSources } from '../../actions';\nimport './Controls.css';\nimport { Context } from '../../contexts/SamplerContext';\nimport MidiControls from '../MidiControls/MidiControls';\n\nvar Controls = function Controls(props) {\n  var context = useContext(Context);\n  var currentPad = context.gridPadsArr[context.selectedPad];\n\n  var validateSelectedFile = function validateSelectedFile(file) {\n    if (!file) return console.log(\"No file...\");\n    var ext = file.name.split('.')[1];\n    var validExt = /mp3|wav|m4a/.test(ext);\n    if (!validExt) return console.error(\"Unable to load selected file\");\n    return updateSources(context, file);\n  };\n\n  var toggleRecMode = function toggleRecMode() {\n    var recMode = !context.recMode;\n    context.dispatch({\n      type: TOGGLE_REC_MODE,\n      payload: {\n        recMode: recMode\n      }\n    });\n  };\n\n  var toggleEditMode = function toggleEditMode() {\n    var editMode = !context.editMode;\n    var recMode = false;\n    context.dispatch({\n      type: TOGGLE_EDIT_MODE,\n      payload: {\n        editMode: editMode,\n        recMode: recMode\n      }\n    });\n  };\n\n  var clearSelectedPad = function clearSelectedPad() {\n    var sources = _objectSpread({}, context.sources);\n\n    sources[context.selectedPad] = {\n      buffer: null,\n      name: \"\",\n      isPlaying: false\n    };\n\n    var gridPadsArr = _toConsumableArray(context.gridPadsArr);\n\n    gridPadsArr[context.selectedPad].source = null;\n    context.dispatch({\n      type: CLEAR_SELECTED_PAD,\n      payload: {\n        sources: sources,\n        gridPadsArr: gridPadsArr\n      }\n    });\n  };\n\n  var renderRecButton = function renderRecButton() {\n    if (context.editMode && currentPad && !currentPad.source) {\n      if (!context.recMode) {\n        return React.createElement(\"div\", {\n          className: \"file-selector-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            toggleRecMode();\n          },\n          className: \"ctl-btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"REC\"));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"file-selector-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            toggleRecMode();\n          },\n          className: \"ctl-btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, \"EDIT\"));\n      }\n    }\n  };\n\n  var renderFileUpload = function renderFileUpload() {\n    var openFileSelector = function openFileSelector(e) {\n      e.preventDefault();\n      var fileSelector = document.getElementById(\"fileSelector\");\n      fileSelector.click();\n    };\n\n    return React.createElement(\"div\", {\n      className: \"file-selector-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"ctl-btn\",\n      onClick: function onClick(e) {\n        return openFileSelector(e);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"LOAD\"), React.createElement(\"input\", {\n      type: \"file\",\n      style: {\n        display: \"none\"\n      },\n      id: \"fileSelector\",\n      onChange: function onChange(e) {\n        return validateSelectedFile(e.target.files[0]);\n      },\n      accept: \"audio/*\",\n      multiple: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  };\n\n  var renderSourceLoadUnload = function renderSourceLoadUnload() {\n    if (context.editMode && currentPad && !currentPad.source) return renderFileUpload();\n\n    if (context.editMode && currentPad && currentPad.source) {\n      return React.createElement(\"button\", {\n        className: \"ctl-btn\",\n        onClick: function onClick() {\n          return clearSelectedPad();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"UNLOAD\");\n    }\n\n    if (context.editMode && currentPad && !currentPad.source) return renderFileUpload();\n  };\n\n  var renderMidiControls = function renderMidiControls() {\n    if (!context.midiEnabled) return;\n    return React.createElement(MidiControls, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"controls-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"ctl-btn\",\n    onClick: function onClick() {\n      return toggleEditMode();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, props.editToggleText), renderSourceLoadUnload(), renderRecButton(), renderMidiControls());\n};\n\nexport default Controls;","map":{"version":3,"sources":["/home/spiced/spiced/spiced-final-project/src/components/Controls/Controls.js"],"names":["React","useContext","TOGGLE_REC_MODE","CLEAR_SELECTED_PAD","TOGGLE_EDIT_MODE","updateSources","Context","MidiControls","Controls","props","context","currentPad","gridPadsArr","selectedPad","validateSelectedFile","file","console","log","ext","name","split","validExt","test","error","toggleRecMode","recMode","dispatch","type","payload","toggleEditMode","editMode","clearSelectedPad","sources","buffer","isPlaying","source","renderRecButton","renderFileUpload","openFileSelector","e","preventDefault","fileSelector","document","getElementById","click","display","target","files","renderSourceLoadUnload","renderMidiControls","midiEnabled","editToggleText"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport {TOGGLE_REC_MODE, CLEAR_SELECTED_PAD, TOGGLE_EDIT_MODE} from '../../reducers/types';\nimport {updateSources} from '../../actions'\nimport './Controls.css';\nimport {Context} from '../../contexts/SamplerContext';\nimport MidiControls from '../MidiControls/MidiControls';\n\nconst Controls = (props) => {\n    const context = useContext(Context);\n    let currentPad = context.gridPadsArr[context.selectedPad];\n    const validateSelectedFile = (file) => {\n        if(!file) return console.log(\"No file...\")\n        let ext = file.name.split('.')[1]\n        let validExt = /mp3|wav|m4a/.test(ext)\n        if(!validExt) return console.error(\"Unable to load selected file\")\n        return updateSources(context, file)\n    }\n    const toggleRecMode = () => {\n        let recMode = !context.recMode\n        context.dispatch({type: TOGGLE_REC_MODE, payload: {recMode}})\n    }\n    const toggleEditMode = () => {\n        let editMode = !context.editMode;\n        let recMode = false;\n        context.dispatch({type: TOGGLE_EDIT_MODE, payload: {editMode, recMode} });\n    }\n    const clearSelectedPad = () => {\n        let sources = {...context.sources}\n        sources[context.selectedPad] = {buffer: null, name: \"\", isPlaying: false}\n        let gridPadsArr = [...context.gridPadsArr];\n        gridPadsArr[context.selectedPad].source = null\n        context.dispatch({type: CLEAR_SELECTED_PAD, payload: {sources, gridPadsArr}})\n    }\n    const renderRecButton = () => {\n        if(context.editMode && currentPad && !currentPad.source){\n            if(!context.recMode){\n                return(\n                    <div className=\"file-selector-wrapper\">\n                        <button\n                        onClick={() => { toggleRecMode() }}\n                        className=\"ctl-btn\"\n                        >REC</button>\n                    </div>\n                )\n            } else {\n                return(\n                    <div className=\"file-selector-wrapper\">\n                        <button\n                        onClick={() => { toggleRecMode() }}\n                        className=\"ctl-btn\"\n                        >EDIT</button>\n                    </div>\n                )\n            }\n            \n        }\n    }\n    const renderFileUpload = () => {\n        const openFileSelector = (e) => {\n            e.preventDefault();\n            let fileSelector = document.getElementById(\"fileSelector\");\n            fileSelector.click();\n        }\n        return (\n            <div className=\"file-selector-wrapper\">\n                <button \n                className=\"ctl-btn\" \n                onClick={(e) => openFileSelector(e)}>LOAD</button>\n                <input \n                type=\"file\" \n                style={{display:\"none\"}}\n                id=\"fileSelector\"\n                onChange={(e) => validateSelectedFile(e.target.files[0])} \n                accept=\"audio/*\" multiple={false}/>\n            </div>    \n        )\n    }\n    const renderSourceLoadUnload = () => {\n        if(context.editMode && currentPad && !currentPad.source) return renderFileUpload();\n        if(context.editMode && currentPad && currentPad.source) {\n            return <button className=\"ctl-btn\" onClick={() => clearSelectedPad()}>UNLOAD</button>\n        }\n        if(context.editMode && currentPad && !currentPad.source) return renderFileUpload()\n    }\n    const renderMidiControls = () => {\n        if(!context.midiEnabled) return\n        return <MidiControls />\n    }\n    \n    return (\n        <div className=\"controls-wrapper\">\n            <button \n            className=\"ctl-btn\" \n            onClick={() => toggleEditMode()}>{props.editToggleText}</button>\n            {renderSourceLoadUnload()}\n            {renderRecButton()}\n            {renderMidiControls()}\n        </div>\n    )\n}\n\nexport default Controls"]},"metadata":{},"sourceType":"module"}