{"ast":null,"code":"var _jsxFileName = \"/home/spiced/spiced/spiced-final-project/src/components/SamplerGrid/SamplerGrid.js\";\nimport React, { useContext, useEffect } from 'react';\nimport { Context } from '../../contexts/SamplerContext';\nimport * as types from '../../reducers/types';\nimport GridPad from '../../contexts/Config/PadGrid';\nimport Colors from '../../Config/ColorScheme';\nimport Hud from '../Hud/Hud';\nimport PadEditor from '../PadEditor/PadEditor';\nimport Pad from '../Pad/Pad';\nimport midiMap from '../../Config/midiMap';\nimport './SamplerGrid.css';\nimport EditorItemRange from '../PadEditorItem/EditorItemRange';\nimport ColorSelector from '../ColorSelector/ColorSelector';\n\nvar SamplerGrid = function SamplerGrid() {\n  var context = useContext(Context);\n  var gridArr = context.gridPadsArr;\n  var selectedPad = context.gridPadsArr[context.selectedPad];\n  var max = 0;\n  var source = context.gridPadsArr[context.selectedPad].source;\n\n  var renderPad = function renderPad(item) {\n    var backgroundColor = Colors.black;\n    var source = context.sources[item.id];\n    var midiNote = midiMap[item.id + 36].note;\n    if (!context.editMode && source && source.buffer) backgroundColor = context.gridPadsArr[context.selectedPad].color;\n    if (context.editMode && source && source.buffer) backgroundColor = Colors.green;\n    return React.createElement(Pad, {\n      midiNote: midiNote,\n      key: item.id,\n      id: item.id,\n      name: item.name,\n      backgroundColor: backgroundColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  };\n\n  var rendercontent = function rendercontent() {\n    if (!context.editMode) return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, gridArr.map(function (item) {\n      return renderPad(item);\n    }));\n    return React.createElement(PadEditor, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  };\n\n  var testForTouchDevice = function testForTouchDevice() {\n    return 'ontouchstart' in window;\n  };\n\n  var testForMidiAPI = function testForMidiAPI() {\n    return \"requestMIDIAccess\" in navigator;\n  };\n\n  var generateGrid = function generateGrid() {\n    var midiEnabled = testForMidiAPI();\n    var touchEnabled = testForTouchDevice();\n    var gridPadsArr = [];\n\n    for (var i = 0; i < context.numPads; i++) {\n      var newPad = new GridPad({\n        id: i\n      });\n      gridPadsArr.push(newPad);\n    }\n\n    var payload = {\n      gridPadsArr: gridPadsArr,\n      touchEnabled: touchEnabled,\n      midiEnabled: midiEnabled\n    };\n    context.dispatch({\n      type: types.GENERATE_GRID,\n      payload: payload\n    });\n  };\n\n  useEffect(function () {\n    if (context.gridPadsArr.length < 1) generateGrid();\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"grid-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Hud, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, rendercontent()), React.createElement(\"div\", {\n    className: \"editor-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(EditorItemRange, {\n    label: \"start\",\n    value: selectedPad.sampleStart,\n    max: max,\n    step: 0.001,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"end\",\n    value: selectedPad.sampleEnd,\n    max: max,\n    step: 0.001,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"gain\",\n    value: context.gridPadsArr[context.selectedPad].currentGain,\n    max: 1,\n    step: 0.01,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"detune\",\n    value: context.gridPadsArr[context.selectedPad].detune,\n    step: 25,\n    min: 0,\n    max: 1000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(ColorSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(EditorItemRange, {\n    label: \"placeholder3\",\n    value: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })));\n};\n\nexport default SamplerGrid;","map":{"version":3,"sources":["/home/spiced/spiced/spiced-final-project/src/components/SamplerGrid/SamplerGrid.js"],"names":["React","useContext","useEffect","Context","types","GridPad","Colors","Hud","PadEditor","Pad","midiMap","EditorItemRange","ColorSelector","SamplerGrid","context","gridArr","gridPadsArr","selectedPad","max","source","renderPad","item","backgroundColor","black","sources","id","midiNote","note","editMode","buffer","color","green","name","rendercontent","map","testForTouchDevice","window","testForMidiAPI","navigator","generateGrid","midiEnabled","touchEnabled","i","numPads","newPad","push","payload","dispatch","type","GENERATE_GRID","length","sampleStart","sampleEnd","currentGain","detune"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport * as types from '../../reducers/types';\nimport GridPad from '../../contexts/Config/PadGrid';\nimport Colors from '../../Config/ColorScheme';\nimport Hud from '../Hud/Hud';\nimport PadEditor from '../PadEditor/PadEditor';\nimport Pad from '../Pad/Pad';\nimport midiMap from '../../Config/midiMap';\nimport './SamplerGrid.css';\nimport EditorItemRange from '../PadEditorItem/EditorItemRange';\nimport ColorSelector from '../ColorSelector/ColorSelector';\n\nconst SamplerGrid = () => {\n    const context = useContext(Context);\n    const gridArr = context.gridPadsArr;\n    let selectedPad = context.gridPadsArr[context.selectedPad];\n    let max = 0;\n    let source = context.gridPadsArr[context.selectedPad].source;\n    const renderPad = (item) => {\n        let backgroundColor = Colors.black\n        let source = context.sources[item.id];\n        const midiNote = midiMap[item.id + 36].note;\n        if(!context.editMode && source && source.buffer) backgroundColor = context.gridPadsArr[context.selectedPad].color;\n        if(context.editMode && source && source.buffer) backgroundColor = Colors.green;\n        return <Pad\n        midiNote={midiNote}\n        key={item.id}\n        id={item.id}\n        name={item.name}\n        backgroundColor={backgroundColor}\n        />\n    }\n    const rendercontent = () => {\n        if(!context.editMode) return <div>{gridArr.map((item) => { return renderPad(item) })}</div>\n        return <PadEditor />\n    }\n    const testForTouchDevice = () => {\n        return 'ontouchstart' in window;\n    }\n    const testForMidiAPI = () => {\n        return \"requestMIDIAccess\" in navigator;\n    }\n    const generateGrid = () => {\n        let midiEnabled = testForMidiAPI();\n        let touchEnabled = testForTouchDevice();\n        let gridPadsArr = [];\n        for(let i = 0; i < context.numPads; i++){\n            let newPad = new GridPad({id: i})\n            gridPadsArr.push(newPad)\n        }\n        let payload = {gridPadsArr, touchEnabled, midiEnabled}\n        context.dispatch({ type: types.GENERATE_GRID, payload })\n    }\n    useEffect(() => {\n        if(context.gridPadsArr.length < 1) generateGrid();\n    }, []);\n    return (\n        <div\n        className=\"grid-wrapper\"\n\n        >\n        <Hud />\n            <div className=\"grid\">\n                {rendercontent()}\n            </div>\n            <div className=\"editor-wrapper\">\n\n                <EditorItemRange label=\"start\" value={selectedPad.sampleStart} max={max} step={0.001} />\n                <EditorItemRange label=\"end\" value={selectedPad.sampleEnd} max={max} step={0.001} />\n                <EditorItemRange label=\"gain\" value={context.gridPadsArr[context.selectedPad].currentGain} max={1} step={0.01} />\n                <EditorItemRange label=\"detune\" value={context.gridPadsArr[context.selectedPad].detune} step={25} min={0} max={1000} />\n                <ColorSelector />\n                <EditorItemRange label=\"placeholder3\" value={0} />\n            </div>\n        </div>\n    )\n}\n\nexport default SamplerGrid\n"]},"metadata":{},"sourceType":"module"}