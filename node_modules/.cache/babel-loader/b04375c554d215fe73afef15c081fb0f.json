{"ast":null,"code":"var _jsxFileName = \"/home/spiced/spiced/spiced-final-project/src/components/PadEditor/PadEditor.js\";\nimport React, { useContext } from \"react\";\nimport { Context } from \"../../contexts/SamplerContext\";\nimport EditorItemRange from \"../PadEditorItem/EditorItemRange\";\nimport EditorItemButtons from \"../PadEditorItem/EditorItemButtons\";\nimport EditorItemButton from \"../PadEditorItem/EditorItemButton\";\nimport RecordButton from \"../PadEditorItem/RecordButton\";\nimport MonitorButton from \"../PadEditorItem/MonitorButton\";\nimport ColorSelector from \"../ColorSelector/ColorSelector\";\nimport \"./PadEditor.css\";\nexport default (function () {\n  var context = useContext(Context);\n  var selectedPad = context.gridPadsArr[context.selectedPad];\n  var max = 0;\n  var source = context.gridPadsArr[context.selectedPad].source;\n\n  if (source && source.buffer) {\n    max = source.buffer.duration;\n  }\n\n  if (context.recMode) {\n    return React.createElement(\"div\", {\n      className: \"editor-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(RecordButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(MonitorButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }));\n  } else {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"editor-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(EditorItemRange, {\n      label: \"start\",\n      value: selectedPad.sampleStart,\n      max: max,\n      step: 0.001,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"end\",\n      value: selectedPad.sampleEnd,\n      max: max,\n      step: 0.001,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"gain\",\n      value: context.gridPadsArr[context.selectedPad].currentGain,\n      max: 1,\n      step: 0.01,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"detune\",\n      value: context.gridPadsArr[context.selectedPad].detune,\n      step: 25,\n      min: 0,\n      max: 1000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(ColorSelector, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(EditorItemRange, {\n      label: \"placeholder3\",\n      value: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })));\n  }\n});","map":{"version":3,"sources":["/home/spiced/spiced/spiced-final-project/src/components/PadEditor/PadEditor.js"],"names":["React","useContext","Context","EditorItemRange","EditorItemButtons","EditorItemButton","RecordButton","MonitorButton","ColorSelector","context","selectedPad","gridPadsArr","max","source","buffer","duration","recMode","sampleStart","sampleEnd","currentGain","detune"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,OAAO,iBAAP;AAEA,gBAAe,YAAM;AACnB,MAAMC,OAAO,GAAGR,UAAU,CAACC,OAAD,CAA1B;AACA,MAAIQ,WAAW,GAAGD,OAAO,CAACE,WAAR,CAAoBF,OAAO,CAACC,WAA5B,CAAlB;AACA,MAAIE,GAAG,GAAG,CAAV;AACA,MAAIC,MAAM,GAAGJ,OAAO,CAACE,WAAR,CAAoBF,OAAO,CAACC,WAA5B,EAAyCG,MAAtD;;AACA,MAAIA,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3BF,IAAAA,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcC,QAApB;AACD;;AACD,MAAIN,OAAO,CAACO,OAAZ,EAAqB;AACnB,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAPD,MAOO;AACL,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,eAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,KAAK,EAAEN,WAAW,CAACO,WAFrB;AAGE,MAAA,GAAG,EAAEL,GAHP;AAIE,MAAA,IAAI,EAAE,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,eAAD;AACE,MAAA,KAAK,EAAC,KADR;AAEE,MAAA,KAAK,EAAEF,WAAW,CAACQ,SAFrB;AAGE,MAAA,GAAG,EAAEN,GAHP;AAIE,MAAA,IAAI,EAAE,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAaE,oBAAC,eAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,KAAK,EAAEH,OAAO,CAACE,WAAR,CAAoBF,OAAO,CAACC,WAA5B,EAAyCS,WAFlD;AAGE,MAAA,GAAG,EAAE,CAHP;AAIE,MAAA,IAAI,EAAE,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAmBE,oBAAC,eAAD;AACE,MAAA,KAAK,EAAC,QADR;AAEE,MAAA,KAAK,EAAEV,OAAO,CAACE,WAAR,CAAoBF,OAAO,CAACC,WAA5B,EAAyCU,MAFlD;AAGE,MAAA,IAAI,EAAE,EAHR;AAIE,MAAA,GAAG,EAAE,CAJP;AAKE,MAAA,GAAG,EAAE,IALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,EA0BE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,EA2BE,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAC,cAAvB;AAAsC,MAAA,KAAK,EAAE,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,CADF,CADF;AAiCD;AACF,CAlDD","sourcesContent":["import React, { useContext } from \"react\";\nimport { Context } from \"../../contexts/SamplerContext\";\nimport EditorItemRange from \"../PadEditorItem/EditorItemRange\";\nimport EditorItemButtons from \"../PadEditorItem/EditorItemButtons\";\nimport EditorItemButton from \"../PadEditorItem/EditorItemButton\";\nimport RecordButton from \"../PadEditorItem/RecordButton\";\nimport MonitorButton from \"../PadEditorItem/MonitorButton\";\nimport ColorSelector from \"../ColorSelector/ColorSelector\";\n\nimport \"./PadEditor.css\";\n\nexport default () => {\n  const context = useContext(Context);\n  let selectedPad = context.gridPadsArr[context.selectedPad];\n  let max = 0;\n  let source = context.gridPadsArr[context.selectedPad].source;\n  if (source && source.buffer) {\n    max = source.buffer.duration;\n  }\n  if (context.recMode) {\n    return (\n      <div className=\"editor-wrapper\">\n        <RecordButton />\n        <MonitorButton />\n      </div>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <div className=\"editor-wrapper\">\n          <EditorItemRange\n            label=\"start\"\n            value={selectedPad.sampleStart}\n            max={max}\n            step={0.001}\n          />\n          <EditorItemRange\n            label=\"end\"\n            value={selectedPad.sampleEnd}\n            max={max}\n            step={0.001}\n          />\n          <EditorItemRange\n            label=\"gain\"\n            value={context.gridPadsArr[context.selectedPad].currentGain}\n            max={1}\n            step={0.01}\n          />\n          <EditorItemRange\n            label=\"detune\"\n            value={context.gridPadsArr[context.selectedPad].detune}\n            step={25}\n            min={0}\n            max={1000}\n          />\n          <ColorSelector />\n          <EditorItemRange label=\"placeholder3\" value={0} />\n        </div>\n      </React.Fragment>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}