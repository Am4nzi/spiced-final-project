"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryAllByRole = queryAllByRole;
exports.findByRole = exports.findAllByRole = exports.getByRole = exports.getAllByRole = exports.queryByRole = void 0;

var _allUtils = require("./all-utils");

var _ariaQuery = require("aria-query");

function buildElementRoleList(elementRolesMap) {
  function makeElementSelector({
    name,
    attributes = []
  }) {
    return `${name}${attributes.map(({
      name: attributeName,
      value
    }) => `[${attributeName}=${value}]`).join('')}`;
  }

  function getSelectorSpecificity({
    attributes = []
  }) {
    return attributes.length;
  }

  let result = [];

  for (const [element, roles] of elementRolesMap.entries()) {
    result = [...result, {
      selector: makeElementSelector(element),
      roles: Array.from(roles),
      specificity: getSelectorSpecificity(element)
    }];
  }

  return result.sort(function ({
    specificity: leftSpecificity
  }, {
    specificity: rightSpecificity
  }) {
    return rightSpecificity - leftSpecificity;
  });
}

const elementRoleList = buildElementRoleList(_ariaQuery.elementRoles);

function queryAllByRole(container, role, {
  exact = true,
  collapseWhitespace,
  trim,
  normalizer
} = {}) {
  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
  const matchNormalizer = (0, _allUtils.makeNormalizer)({
    collapseWhitespace,
    trim,
    normalizer
  });

  function getImplicitAriaRole(currentNode) {
    for (const _ref of elementRoleList) {
      const {
        selector,
        roles
      } = _ref;

      if (currentNode.matches(selector)) {
        return [...roles];
      }
    }

    return [];
  }

  return Array.from(container.querySelectorAll('*')).filter(node => {
    const isRoleSpecifiedExplicitly = node.hasAttribute('role');

    if (isRoleSpecifiedExplicitly) {
      return matcher(node.getAttribute('role'), node, role, matchNormalizer);
    }

    const implicitRoles = getImplicitAriaRole(node);
    return implicitRoles.some(implicitRole => matcher(implicitRole, node, role, matchNormalizer));
  });
}

const getMultipleError = (c, id) => `Found multiple elements by [role=${id}]`;

const getMissingError = (c, id) => `Unable to find an element by [role=${id}]`;

const [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = (0, _allUtils.buildQueries)(queryAllByRole, getMultipleError, getMissingError);
exports.findByRole = findByRole;
exports.findAllByRole = findAllByRole;
exports.getByRole = getByRole;
exports.getAllByRole = getAllByRole;
exports.queryByRole = queryByRole;