{"version":3,"sources":["../../sampler2/Sampler/src/reducers/samplerReducer.js","../../sampler2/Sampler/src/reducers/types.js","../../sampler2/Sampler/src/contexts/Config/AudioInitialState.js","../../sampler2/Sampler/src/contexts/SamplerContext.js","../../sampler2/Sampler/src/Config/ColorScheme.js","../../sampler2/Sampler/src/actions/index.js","../../sampler2/Sampler/src/Config/keyboardControls.js","../../sampler2/Sampler/src/components/WorkerNotify/WorkerNotify.js","../../sampler2/Sampler/src/components/StartScreen/StartScreen.js","../../sampler2/Sampler/src/contexts/Config/PadGrid.js","../../sampler2/Sampler/src/components/WaveformDisplay/WaveformDisplay.js","../../sampler2/Sampler/src/Config/midiMap.js","../../sampler2/Sampler/src/components/MidiControls/MidiControls.js","../../sampler2/Sampler/src/components/Controls/Controls.js","../../sampler2/Sampler/src/components/Hud/Hud.js","../../sampler2/Sampler/src/components/PadEditorItem/EditorItemRange.js","../../sampler2/Sampler/src/components/PadEditorItem/EditorItemButtons.js","../../sampler2/Sampler/src/components/PadEditorItem/EditorItemButton.js","../../sampler2/Sampler/src/components/PadEditorItem/RecordButton.js","../../sampler2/Sampler/src/components/PadEditorItem/MonitorButton.js","../../sampler2/Sampler/src/components/ColorSelector/ColorSelector.js","../../sampler2/Sampler/src/components/PadEditor/PadEditor.js","../../sampler2/Sampler/src/Config/touchControls.js","../../sampler2/Sampler/src/components/Pad/Pad.js","../../sampler2/Sampler/src/components/SamplerGrid/SamplerGrid.js","../../sampler2/Sampler/src/index.js","../../sampler2/Sampler/src/components/App/App.js"],"names":["samplerReducer","state","_ref","type","payload","Object","objectSpread","AudioInitialState","touchEnabled","midiEnabled","midiInputs","midiChannel","ctx","numPads","banks","currentbank","gridPadsArr","editMode","sources","selectedPad","analyser","recMode","isRecording","isMonitoring","recorder","monitor","Context","React","createContext","ColorScheme","gray","white","black","brown","green","red","yellow","purple","blue","lightblue","lightorange","orange","setCTX","asyncToGenerator","regenerator_default","a","mark","_callee","context","wrap","_context","prev","next","window","AudioContext","webkitAudioContext","createAnalyser","stop","_x","apply","this","arguments","connect","destination","dispatch","updateSources","file","reader","FileReader","onload","e","decodeAudioData","target","result","buffer","name","split","waveformData","getChannelData","isPlaying","newSource","createBufferSource","source","start","sampleEnd","duration","gainNode","createGain","readAsArrayBuffer","handlePadTrigger","padId","velocity","length","undefined","selectedSource","selfMuted","detune","value","currentGain","Math","pow","gain","setValueAtTime","currentTime","sampleStart","updateEditorData","_ref2","cmd","val","newPadsArr","Number","handlePadStop","color","Colors","keyboardControls","49","hold","50","51","52","81","87","69","82","65","83","68","70","90","88","67","86","WorkerNotify","_useState","useState","_useState2","slicedToArray","prompt","setPrompt","useEffect","navigator","addEventListener","preventDefault","installClickHandler","userChoice","then","res","outcome","react_default","createElement","Fragment","className","onClick","StartScreen_StartScreen","useContext","style","backgroundColor","padding","matchMedia","matches","components_WorkerNotify_WorkerNotify","listStyle","href","fontSize","GridPad","id","classCallCheck","isLoaded","concat","midiCC","midiNote","WaveformDisplay","canvasRef","useRef","canvas","current","c","getContext","clearRect","width","height","sourceAvailable","data","step","ceil","amp","fillStyle","i","min","max","j","datum","fillRect","draw","ref","position","left","draggable","top","margin","midiMap","5","cc","6","7","8","36","note","37","38","39","40","41","42","43","44","45","46","47","48","MidiControls","props","setMidiInputs","requestMIDIAccess","access","inputs","entries","onstatechange","console","log","port","manufacturer","filteredInputs","filter","input","catch","err","forEach","onmidimessage","round","end","map","key","role","aria-label","Controls","currentPad","toggleRecMode","renderFileUpload","document","getElementById","click","openFileSelector","display","onChange","ext","test","error","validateSelectedFile","files","accept","multiple","toggleEditMode","editToggleText","toConsumableArray","clearSelectedPad","renderRecButton","renderMidiControls","Hud_Hud","components_Controls_Controls","background","textAlign","border","gridTemplateRows","gridTemplateColumns","justifyContent","EditorItemRange","htmlFor","label","toUpperCase","floor","EditorItemButtons","cmd1","cmd2","content1","content2","val1","val2","EditorItemButton","content","recordedChunks","RecordButton","toggleIsRecording","disconnect","mediaDevices","getUserMedia","audio","video","stream","monitorStream","clone","monSource","createMediaStreamSource","recSource","recDestination","createMediaStreamDestination","MediaRecorder","onstop","recordedBlob","Blob","getAudioTracks","track","ondataavailable","push","MonitorButton","toggleDirectMonitor","ColorSelector","currentTarget","selectedOptions","keys","PadEditor_PadEditor","touchControls","0","1","2","3","4","9","10","11","12","13","14","15","Pad_Pad","transition","onDoubleClick","onTouchStart","touchCTRL","onTouchEnd","SamplerGrid","gridArr","generateGrid","newPad","item","renderPad","ReactDOM","render","_useReducer","useReducer","updateEditorReducer","INITIAL_STATE","_useReducer2","Provider","children","src","frameborder","allow","seamless","onKeyDown","stopPropagation","keyTrigger","keyCTRL","which","repeat","handleKeyDown","onKeyUp","handleKeyUp","tabIndex","components_SamplerGrid_SamplerGrid"],"mappings":"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","file":"static/js/main.9e99b1a3.chunk.js","sourcesContent":["import * as types from './types'\n\n\nexport default (state, {type, payload}) => {\n    switch(type){\n        case types.UPDATE_EDITOR_DATA:\n            return {...state, ...payload}\n        case types.CLEAR_SELECTED_PAD:\n            return {...state, ...payload}\n        case types.HANDLE_PAD_STOP:\n            return {...state, ...payload}\n        case types.UPDATE_SOURCES:\n            return {...state, ...payload}\n        case types.HANDLE_PAD_TRIGGER:\n            return {...state, ...payload}\n        case types.TOGGLE_EDIT_MODE: \n            return {...state, ...payload}\n        case types.TOGGLE_IS_RECORDING:\n            return {...state, ...payload}\n        case types.TOGGLE_DIRECT_MONITOR:\n            return {...state, ...payload}\n        case types.GENERATE_GRID:\n            return {...state, ...payload}\n        case types.SET_MIDI_INPUTS:\n            return {...state, ...payload}\n        case types.CREATE_ANALYSER:\n            return {...state, ...payload}\n        default:\n            return state\n    }\n}","export const GENERATE_GRID = \"GENERATE_GRID\"\nexport const CREATE_ANALYSER = \"CREATE_ANALYSER\"\nexport const SET_MIDI_INPUTS = \"SET_MIDI_INPUTS\"\nexport const TOGGLE_REC_MODE = \"TOGGLE_REC_MODE\"\nexport const TOGGLE_EDIT_MODE = \"TOGGLE_REC_MODE\"\nexport const UPDATE_SOURCES = \"UPDATE_SOURCES\"\nexport const HANDLE_PAD_TRIGGER = \"HANDLE_PAD_TRIGGER\"\nexport const HANDLE_PAD_STOP = \"HANDLE_PAD_STOP\"\nexport const CLEAR_SELECTED_PAD = \"CLEAR_SELECTED_PAD\"\nexport const UPDATE_EDITOR_DATA = \"UPDATE_EDITOR_DATA\"\nexport const TOGGLE_IS_RECORDING = \"TOGGLE_IS_RECORDING\"\nexport const TOGGLE_DIRECT_MONITOR = \"TOGGLE_DIRECT_MONITOR\"","export default {\n    touchEnabled: false,\n    midiEnabled: false,\n    midiInputs: null,\n    midiChannel: 10,\n    ctx: null,\n    numPads: 8,\n    banks: 4,\n    currentbank: 1,\n    gridPadsArr: [],\n    editMode: false,\n    sources: {},\n    selectedPad: 0,\n    analyser: null,\n    recMode: false,\n    isRecording: false,\n    isMonitoring: true,\n    recorder: null,\n    monitor: null\n}\n","import React, {useReducer} from 'react';\nimport updateEditorReducer from '../reducers/samplerReducer';\nimport INITIAL_STATE from './Config/AudioInitialState';\n\nexport const Context = React.createContext();\n\nexport function SamplerContextStore(props) {\n    const [state, dispatch] = useReducer(updateEditorReducer, INITIAL_STATE)\n    return <Context.Provider value={{\n        ...state,\n        dispatch,\n    }}>{props.children}\n    </Context.Provider>\n}","export default {\n    gray: \"#8E8D92\",\n    white: \"#F2EDEA\",\n    black: \"#8091A3\",\n    brown: \"#593E2F\",\n    green: \"#0BAB76\",\n    red: \"#F5627A\",\n    yellow: \"#FFAA00\",\n    purple: \"#EF7782\",\n    blue: \"#3c3e42\",\n    lightblue: \"#38A8CE\",\n    lightorange: \"#FF6000\",\n    orange: \"#FF3800\"\n}\n","import * as types from '../reducers/types'\nimport Colors from '../Config/ColorScheme';\n\nexport const setCTX = async (context) => {\n    let ctx = !context.ctx ? new (window.AudioContext || window.webkitAudioContext)() : null;\n    createAnalyser(context, ctx)\n}\nexport const createAnalyser = (context, ctx) =>{\n    let analyser = ctx.createAnalyser();\n    analyser.connect(ctx.destination);\n    context.dispatch({type: types.CREATE_ANALYSER, payload: {ctx, analyser}})\n}\n\nexport const updateSources = (context, file) => {\n    let reader = new FileReader();\n    reader.onload = e => {\n        context.ctx.decodeAudioData(e.target.result, (buffer) => {\n            let sources = {...context.sources}\n            let name = file.name.split('.')[0]\n            let waveformData = buffer.getChannelData(0)\n            sources[context.selectedPad] = {buffer: buffer, name, isPlaying: false, waveformData}\n            let gridPadsArr = context.gridPadsArr;\n            let newSource = context.ctx.createBufferSource();\n            newSource.buffer = buffer;\n            gridPadsArr[context.selectedPad].source = newSource;\n            gridPadsArr[context.selectedPad].source.start()\n            gridPadsArr[context.selectedPad].sampleEnd = buffer.duration;\n            gridPadsArr[context.selectedPad].gainNode = context.ctx.createGain();\n            gridPadsArr[context.selectedPad].gainNode.connect(context.ctx.destination);\n            context.dispatch({type: types.UPDATE_SOURCES, payload: {sources, gridPadsArr}});\n        })\n    }\n    reader.readAsArrayBuffer(file);\n}\n\nexport const handlePadTrigger = (context, padId, velocity = 127) => {\n    let selectedSource =  context.sources[padId];\n    let selectedPad = padId\n    if(selectedSource && selectedSource.buffer){\n        if(context.gridPadsArr[padId].source && context.gridPadsArr[padId].selfMuted){\n            context.gridPadsArr[padId].source.stop();\n        }\n        let gridPadsArr = context.gridPadsArr;\n        let newSource = context.ctx.createBufferSource();\n        newSource.buffer = context.sources[padId].buffer;\n        gridPadsArr[padId].source = newSource;\n        gridPadsArr[padId].isPlaying = true;\n        if(context.selectedPad !== padId){\n            context.dispatch({type: types.HANDLE_PAD_TRIGGER, payload: {gridPadsArr, selectedPad}});\n        }\n        newSource.connect(context.gridPadsArr[padId].gainNode);\n        newSource.detune.value = context.gridPadsArr[padId].detune;\n        let currentGain = velocity !== 127 ? Math.pow(velocity, 2) / Math.pow(127, 2) : context.gridPadsArr[padId].currentGain;\n        context.gridPadsArr[padId].gainNode.gain.setValueAtTime(currentGain, context.ctx.currentTime)\n        context.gridPadsArr[padId].source.start(context.ctx.currentTime, context.gridPadsArr[padId].sampleStart , context.gridPadsArr[padId].sampleEnd);\n        context.gridPadsArr[padId].source.stop(context.ctx.currentTime + context.gridPadsArr[padId].sampleEnd);\n    } else {\n        if(context.selectedPad !== padId){\n            context.dispatch({type: types.HANDLE_PAD_TRIGGER, payload: {selectedPad}});\n        }\n    }\n}\n\nexport const handlePadStop = (context, padId, gridPadsArr) => {\n    if(context.gridPadsArr[padId].source && context.gridPadsArr[padId].selfMuted){\n        context.gridPadsArr[padId].source.stop();\n        context.gridPadsArr[padId].isPlaying = false\n        context.dispatch({type: types.HANDLE_PAD_STOP, payload: {gridPadsArr}});\n    }\n}\n\nexport const updateEditorData = ({context, cmd, val}) => {\n    let newPadsArr = context.gridPadsArr;\n    let selectedPad = context.selectedPad;\n    if(cmd === \"start\"){\n        if(val >= newPadsArr[context.selectedPad].sampleEnd) return;\n        newPadsArr[context.selectedPad].sampleStart = Number(val);\n    }\n    if(cmd === \"end\"){\n        if(val <= newPadsArr[context.selectedPad].sampleStart) return;\n        newPadsArr[context.selectedPad].sampleEnd = Number(val);\n    }\n    if(cmd === \"gain\"){\n        newPadsArr[context.selectedPad].currentGain = val;\n    }\n    if(cmd === \"detune\" && val !== \"Current\"){\n        newPadsArr[context.selectedPad].detune = val;\n    }\n    if(cmd === \"prev\"){\n        selectedPad = context.selectedPad + val < 0 ? context.gridPadsArr.length - 1 : context.selectedPad + val;\n    }\n    if(cmd === \"next\"){\n        selectedPad = context.selectedPad + val > context.gridPadsArr.length - 1 ?  0 : context.selectedPad + val;\n    }\n    if(cmd === \"play\"){\n        handlePadTrigger(context, context.selectedPad);\n    }\n    if(cmd === \"stop\"){\n        handlePadStop(context.selectedPad, newPadsArr);\n    }\n    if(cmd === \"color\"){\n        newPadsArr[context.selectedPad].color = Colors[val];\n    }\n    let payload = {gridPadsArr: newPadsArr, selectedPad}\n    context.dispatch({type: types.UPDATE_EDITOR_DATA, payload });\n}","export default {\n    49: {padId: 0, hold: false},\n    50: {padId: 1, hold: false},\n    51: {padId: 2, hold: false},\n    52: {padId: 3, hold: false},\n    81: {padId: 4, hold: false},\n    87: {padId: 5, hold: false},\n    69: {padId: 6, hold: false},\n    82: {padId: 7, hold: false},\n    65: {padId: 8, hold: false},\n    83: {padId: 9, hold: false},\n    68: {padId: 10, hold: false},\n    70: {padId: 11, hold: false},\n    90: {padId: 12, hold: false},\n    88: {padId: 13, hold: false},\n    67: {padId: 14, hold: false},\n    86: {padId: 15, hold: false},\n}","import React , {useState, useEffect} from 'react'\n\nconst WorkerNotify = () => {\n    const [prompt, setPrompt] = useState(null)\n    useEffect(() => {\n        if('serviceWorker' in navigator){\n            window.addEventListener('beforeinstallprompt', e => {\n                e.preventDefault()\n                setPrompt(e)\n            })\n        }\n    }, [])\n    const installClickHandler = () => {\n        prompt.prompt()\n        prompt.userChoice.then(res => {\n            if(res.outcome === \"accepted\"){\n                setPrompt(null)\n            }\n        })\n    }\n    const renderInstallButton = () => {\n        if(prompt){\n            return <button \n            className=\"btn\"\n            onClick={installClickHandler}\n            >USE AS APP</button>\n        }\n        return null\n    }\n    return(\n        <>\n            {renderInstallButton()}\n        </>\n    )\n}\n\nexport default WorkerNotify","import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport {setCTX} from '../../actions'\nimport './StartScreen.css';\nimport Colors from '../../Config/ColorScheme';\nimport WorkerNotify from '../WorkerNotify/WorkerNotify'\n\nexport default () => {\n    const context = useContext(Context);\n    const displayContent = () => {\n        if(!window.AudioContext){\n            return (\n                <div>\n                    <div className=\"start-info\">\n                    <p>Sorry, Your browser doesn't support Web Audio :(</p>\n                    </div>\n                </div>\n            )\n        }\n        return(\n            <div>\n                <div className=\"start-info\">\n                    <p><strong>LOAD:</strong> WAV/MP3 files</p>\n                    <p><strong>RECORD:</strong> from default input</p>\n                    <p>Basic <strong>MIDI SUPPORT:</strong> on Chromium based browsers</p>\n                    <p><strong>KEYBOARD CONTROLS:</strong></p>\n                    <ul style={{listStyle:\"none\"}}>\n                        <li>1 - 4</li>\n                        <li>Q - R</li>\n                        <li>A - F</li>\n                        <li>Z - V</li>\n                    </ul>\n                    <p>New features incoming soon...</p>\n                </div>\n                <button \n                className=\"btn\"\n                onClick={() => { setCTX(context)}}\n                >START</button>\n            </div>\n        )\n    }\n    const renderInstallButton = () => {\n        if(!window.matchMedia('(\"display-mode: standalone\")').matches){\n            return <WorkerNotify />\n        }\n        return null\n    }\n    return (\n        <div className=\"start-wrapper\" style={{backgroundColor: Colors.blue, color: Colors.black}}>\n        <div className=\"content-container\">\n            <div style={{backgroundColor: Colors.white, padding: \"1vh 2vw\"}}>\n            <h1>REACT SAMPLER <br/> with Web Audio API</h1>\n            {renderInstallButton()}\n            {displayContent()}\n            <div>\n                <h4>\n                    <a \n                    className=\"start-links\"\n                    href=\"https://github.com/CannonFodderr/Sampler\" target=\"__blank\">Fork me on GitHub</a> Made with <span style={{color: Colors.red, fontSize: \"1.3rem\"}}>♥</span> by <a className=\"start-links\" href=\"https://idanprofile.herokuapp.com/profile/1/projects\">Idan Izhaki</a>\n                </h4>\n            </div>\n            </div>\n        </div>            \n        </div>\n    )\n}\n","import Colors from '../../Config/ColorScheme';\n\nexport default class GridPad {\n    constructor({id}){\n        this.id = id;\n        this.isLoaded = false;\n        this.name = `Pad${id}`;\n        this.gainNode = null;\n        this.source = null;\n        this.color = Colors.purple;\n        this.isPlaying = false;\n        this.selfMuted = true;\n        this.sampleStart = 0;\n        this.currentGain = 1;\n        this.detune = 0;\n        this.sampleEnd = this.sampleStart;\n        this.midiCC = null;\n        this.midiNote = null;\n    }\n}","import React, {useContext, useRef, useEffect} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\n\nexport default () => {\n    const context = useContext(Context);\n    const canvasRef = useRef(null)\n    const draw = () => {\n        let canvas = canvasRef.current;\n        let c = canvas.getContext('2d');\n        c.clearRect(0, 0, canvas.width, canvas.height);\n        let sourceAvailable = context.sources[context.selectedPad];\n        if(!sourceAvailable || !sourceAvailable.waveformData) return;\n        let data = sourceAvailable.waveformData;\n        let step = Math.ceil(data.length / canvas.width);\n        let amp = canvas.height / 2;\n        c.fillStyle = Colors.white;\n        for(var i=0; i < canvas.width; i++){\n            var min = 1.0;\n            var max = -1.0;\n            for (var j=0; j<step; j++) {\n                var datum = data[(i*step)+j];\n                if (datum < min)\n                    min = datum;\n                if (datum > max)\n                    max = datum;\n            }\n            c.fillRect(i,(1+min)*amp,1,Math.max(1,(max-min)*amp));\n        }\n    }\n    useEffect(() => {\n            draw()\n    })\n    let selectedSource = context.sources[context.selectedPad] ? context.sources[context.selectedPad] : 'Empty'\n    let backgroundColor = context.isRecording ? Colors.red : Colors.blue;\n    return <div>\n            <canvas\n            id=\"waveformDisplay\"\n            ref={canvasRef}\n            style={{backgroundColor: backgroundColor, width: \"100%\", height: \"9vh\", position: \"absolute\", left: 0}}\n            />\n            <h4 draggable={false} style={{position: \"relative\", top: 0, margin: \"1vh 0vw\"}} className=\"pad-name disable-text-select\">{context.selectedPad + 1} : {selectedSource.name}</h4>\n        </div>\n}\n","export default {\n    5: {padId: null, cc: \"sampleStart\"},\n    6: {padId: null, cc: \"sampleEnd\"},\n    7: {padId: null, cc: \"gain\"},\n    8: {padId: null, cc: \"detune\"},\n    36: {padId: 12, cc: \"note\", note: \"1\"},\n    37: {padId: 13, cc: \"note\", note: \"2\"},\n    38: {padId: 14, cc: \"note\", note: \"3\"},\n    39: {padId: 15, cc: \"note\", note: \"4\"},\n    40: {padId: 8, cc: \"note\", note: \"Q\"},\n    41: {padId: 9, cc: \"note\", note: \"W\"},\n    42: {padId: 10, cc: \"note\", note: \"E\"},\n    43: {padId: 11, cc: \"note\", note: \"R\"},\n    44: {padId: 4, cc: \"note\", note: \"G#2\"},\n    45: {padId: 5, cc: \"note\", note: \"A2\"},\n    46: {padId: 6, cc: \"note\", note: \"Bb2\"},\n    47: {padId: 7, cc: \"note\", note: \"B2\"},\n    48: {padId: 0, cc: \"note\", note: \"C3\"},\n    49: {padId: 1, cc: \"note\", note: \"C#3\"},\n    50: {padId: 2, cc: \"note\", note: \"D3\"},\n    51: {padId: 3, cc: \"note\", note: \"D#3\"},\n}\n","import React, {useContext, useEffect} from 'react';\nimport {SET_MIDI_INPUTS} from '../../reducers/types'; \nimport {updateEditorData, handlePadTrigger} from '../../actions'\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport '../Controls/Controls.css';\nimport midiMap from '../../Config/midiMap';\n\nexport default (props) => {\n    let context = useContext(Context);\n    const renderSelectOptions = () => {\n        if(!context.midiInputs) return \n        else return context.midiInputs.map(input => {\n            return <option key={input.id} id={input.id}>{input.name}</option>\n        })\n    }\n    const renderMidiDeviceSelector = () => {\n        if(!context.midiInputs) return <span className=\"disable-text-select\" role=\"img\" aria-label=\"no midi\">🚫🎹</span>\n        return(\n            <select className=\"ctl-select\" style={{color: Colors.white}}>\n                {renderSelectOptions()}\n            </select>\n        )\n    }\n    const addMidiListeners = () => {\n        context.midiInputs.forEach(input => {\n            input.onmidimessage = (e) => {\n                // console.log(e);\n                let cmd = e.data[0];\n                let note = e.data[1];\n                let velocity = e.data[2];\n                if(!midiMap[note]) return\n                if(midiMap[note].cc === \"note\" && cmd - context.midiChannel === 144){\n                    handlePadTrigger(context, midiMap[note].padId, velocity)\n                }\n                if(midiMap[note].cc === \"gain\"){\n                    let gain = Math.pow(velocity, 2) / Math.pow(127, 2);\n                    updateEditorData({context, cmd: \"gain\", val: gain});\n                }\n                if(midiMap[note].cc === \"detune\"){\n                    let detune = Math.round(Math.pow(velocity, 2) / Math.pow(127, 2) * Math.pow(10, 3));\n                    updateEditorData({context, cmd: \"detune\", val: detune});\n                }\n                if(midiMap[note].cc === \"sampleStart\"){\n                    let sourceAvailable = context.gridPadsArr[context.selectedPad].source\n                    if(!sourceAvailable || !sourceAvailable.buffer) return\n                    let start = Math.pow(velocity, 2) / Math.pow(127, 2) * sourceAvailable.buffer.duration\n                    updateEditorData({context, cmd: \"start\", val: start});\n                }\n                if(midiMap[note].cc === \"sampleEnd\"){\n                    let sourceAvailable = context.gridPadsArr[context.selectedPad].source\n                    if(!sourceAvailable || !sourceAvailable.buffer) return\n                    let end = Math.pow(velocity, 2) / Math.pow(127, 2) * sourceAvailable.buffer.duration\n                    updateEditorData({context, cmd: \"end\", val: end});\n                }\n            }\n        });\n    }\n    const setMidiInputs = (midiInputs) => {\n        context.dispatch({type: SET_MIDI_INPUTS, payload: {midiInputs}})\n    }\n    const getMidiDevices = () => {\n        navigator.requestMIDIAccess()\n        .then((access) => {\n            let inputs = access.inputs.entries().next().value;\n            // let outputs = access.outputs;\n            access.onstatechange = (e) => {\n                console.log(e.port.name, e.port.manufacturer, e.port.state);\n            } \n            let filteredInputs = inputs.filter(input => typeof(input) === \"object\")\n            setMidiInputs(filteredInputs);\n        })\n        .catch(err => {\n            setMidiInputs(null);\n        })\n    }\n\n    useEffect(() => {\n        if(context.midiEnabled || !context.midiInputs) getMidiDevices();\n        if(!context.midiInputs) return\n            \n    }, []);\n    if(context.midiInputs) addMidiListeners()\n    return (\n        <div className=\"ctl-select-wrapper\">\n            {renderMidiDeviceSelector()}\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {TOGGLE_REC_MODE, CLEAR_SELECTED_PAD, TOGGLE_EDIT_MODE} from '../../reducers/types';\nimport {updateSources} from '../../actions'\nimport './Controls.css';\nimport {Context} from '../../contexts/SamplerContext';\nimport MidiControls from '../MidiControls/MidiControls';\n\nconst Controls = (props) => {\n    const context = useContext(Context);\n    let currentPad = context.gridPadsArr[context.selectedPad];\n    const validateSelectedFile = (file) => {\n        if(!file) return console.log(\"No file...\")\n        let ext = file.name.split('.')[1]\n        let validExt = /mp3|wav|m4a/.test(ext)\n        if(!validExt) return console.error(\"Unable to load selected file\")\n        return updateSources(context, file)\n    }\n    const toggleRecMode = () => {\n        let recMode = !context.recMode\n        context.dispatch({type: TOGGLE_REC_MODE, payload: {recMode}})\n    }\n    const toggleEditMode = () => {\n        let editMode = !context.editMode;\n        let recMode = false;\n        context.dispatch({type: TOGGLE_EDIT_MODE, payload: {editMode, recMode} });\n    }\n    const clearSelectedPad = () => {\n        let sources = {...context.sources}\n        sources[context.selectedPad] = {buffer: null, name: \"\", isPlaying: false}\n        let gridPadsArr = [...context.gridPadsArr];\n        gridPadsArr[context.selectedPad].source = null\n        context.dispatch({type: CLEAR_SELECTED_PAD, payload: {sources, gridPadsArr}})\n    }\n    const renderRecButton = () => {\n        if(context.editMode && currentPad && !currentPad.source){\n            if(!context.recMode){\n                return(\n                    <div className=\"file-selector-wrapper\">\n                        <button\n                        onClick={() => { toggleRecMode() }}\n                        className=\"ctl-btn\"\n                        >REC</button>\n                    </div>\n                )\n            } else {\n                return(\n                    <div className=\"file-selector-wrapper\">\n                        <button\n                        onClick={() => { toggleRecMode() }}\n                        className=\"ctl-btn\"\n                        >EDIT</button>\n                    </div>\n                )\n            }\n            \n        }\n    }\n    const renderFileUpload = () => {\n        const openFileSelector = (e) => {\n            e.preventDefault();\n            let fileSelector = document.getElementById(\"fileSelector\");\n            fileSelector.click();\n        }\n        return (\n            <div className=\"file-selector-wrapper\">\n                <button \n                className=\"ctl-btn\" \n                onClick={(e) => openFileSelector(e)}>LOAD</button>\n                <input \n                type=\"file\" \n                style={{display:\"none\"}}\n                id=\"fileSelector\"\n                onChange={(e) => validateSelectedFile(e.target.files[0])} \n                accept=\"audio/*\" multiple={false}/>\n            </div>    \n        )\n    }\n    const renderSourceLoadUnload = () => {\n        if(context.editMode && currentPad && !currentPad.source) return renderFileUpload();\n        if(context.editMode && currentPad && currentPad.source) {\n            return <button className=\"ctl-btn\" onClick={() => clearSelectedPad()}>UNLOAD</button>\n        }\n        if(context.editMode && currentPad && !currentPad.source) return renderFileUpload()\n    }\n    const renderMidiControls = () => {\n        if(!context.midiEnabled) return\n        return <MidiControls />\n    }\n    \n    return (\n        <div className=\"controls-wrapper\">\n            <button \n            className=\"ctl-btn\" \n            onClick={() => toggleEditMode()}>{props.editToggleText}</button>\n            {renderSourceLoadUnload()}\n            {renderRecButton()}\n            {renderMidiControls()}\n        </div>\n    )\n}\n\nexport default Controls","import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport './Hud.css';\nimport Colors from '../../Config/ColorScheme';\nimport WaveformDisplay from '../WaveformDisplay/WaveformDisplay';\nimport Controls from '../Controls/Controls';\n\nexport default () => {\n    const context = useContext(Context);\n    let editToggleText = context.editMode ? '◀️' : '⚙️';\n    return(\n        <div className=\"hud-wrapper\" style={{backgroundColor: Colors.lightblue, color: Colors.white}}>\n            <WaveformDisplay />\n            <Controls editToggleText={editToggleText}/>\n        </div>\n    )\n}\n","import React, {useContext} from 'react';\nimport {updateEditorData} from '../../actions'\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorItem.css';\n\nlet style = { \n    background: Colors.gray, \n    color: Colors.white, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr 1fr\",\n    gridTemplateColumns: \"90%\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\",\n}\n\nexport default (props) => {\n    const context = useContext(Context)\n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            <label htmlFor={props.label} \n            className=\"pad-item-label pad-text\" \n            style={{width: \"100%\", margin:\"auto\"}}>{props.label.toUpperCase()}: {Math.floor(props.value * 100) / 100}</label>\n            <input \n            type=\"range\" \n            min={0} \n            max={props.max} \n            value={props.value} \n            name={props.label} \n            step={props.step}\n            id={props.label}\n            onChange={(e) => { updateEditorData({context, cmd: props.label, val: e.target.value})}}/>\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {updateEditorData} from '../../actions'\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorButtons.css';\n\nlet style = { \n    background: Colors.gray, \n    color: Colors.white, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr\",\n    gridTemplateColumns: \"1fr 1fr\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\"\n}\n\nexport default ({cmd1, cmd2, content1, content2, val1, val2}) => {\n    const context = useContext(Context)\n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            <button\n            className=\"editor-btn\"\n            id=\"prev\"\n            onClick={(e) => { updateEditorData({context, cmd: cmd1, val: val1})}}>\n            {content1}\n            </button>\n            <button\n            className=\"editor-btn\"\n            id=\"next\"\n            onClick={(e) => { updateEditorData({context, cmd: cmd2, val: val2})}}>\n            {content2}\n            </button>\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {updateEditorData} from '../../actions'\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorButtons.css';\n\n\nlet style = { \n    background: Colors.gray, \n    color: Colors.red, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr\",\n    gridTemplateColumns: \"1fr\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\"\n}\n\nexport default ({cmd, content}) => {\n    const context = useContext(Context)\n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            <button\n            className=\"editor-btn btn-play\"\n            id=\"next\"\n            onClick={(e) => { updateEditorData({context, cmd: cmd})}}\n            >\n            {content}\n            </button>\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {TOGGLE_IS_RECORDING} from '../../reducers/types';\nimport {Context} from '../../contexts/SamplerContext';\nimport {updateSources} from '../../actions'\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorButtons.css';\n\nlet recorder = null;\nlet recordedChunks = [];\nlet style = { \n    background: Colors.gray, \n    color: Colors.red, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr\",\n    gridTemplateColumns: \"1fr\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\"\n}\n\nexport default () => {\n    const context = useContext(Context);\n    const toggleIsRecording = (monitor) => {\n        let isRecording = !context.isRecording\n        context.dispatch({type: TOGGLE_IS_RECORDING, payload: { isRecording, monitor }});\n    }\n    \n    const startRecording = () => {\n        navigator.mediaDevices.getUserMedia({audio: true, video: false})\n            .then(stream => {\n                let monitorStream = stream.clone()\n                let monSource = context.ctx.createMediaStreamSource(monitorStream);\n                monSource.connect(context.ctx.destination);\n                let recSource = context.ctx.createMediaStreamSource(stream);\n                let recDestination = context.ctx.createMediaStreamDestination();\n                recSource.connect(recDestination);\n                recorder = new MediaRecorder(recDestination.stream);\n                recorder.start()\n                recorder.onstop = () => {\n                    let recordedBlob = new Blob(recordedChunks, { 'type' : 'audio/ogg; codecs=opus' });\n                    recordedBlob.name = \"sample record\";\n                    recordedChunks = [];\n                    recorder = null;\n                    updateSources(context, recordedBlob)\n                    let monitorTracks = monitorStream.getAudioTracks();\n                    monitorTracks.forEach(track => track.stop());\n                    let recTracks = stream.getAudioTracks();\n                    recTracks.forEach(track => track.stop());\n                }\n                recorder.ondataavailable  = (e) => {\n                    recordedChunks.push(e.data);\n                }\n                toggleIsRecording(monSource);\n            })\n            .catch(err => console.log(err))\n    }\n    const stopRecording = () => {\n        recorder.stop();\n        context.monitor.disconnect();\n        toggleIsRecording(null);\n    }\n    const renderButtonContent = () => {\n        if(!context.isRecording){\n            return <button className=\"editor-btn btn-play\" id=\"rec\" onClick={(e) => { startRecording() }}>REC</button>\n        }\n        return (\n            <button \n            style={{backgroundColor: Colors.red }} \n            className=\"editor-btn btn-play\" \n            id=\"rec\" \n            onClick={(e) => { stopRecording() }}\n            >\n            STOP\n            </button>\n        )\n    }\n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            {renderButtonContent()}\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\nimport './PadEditorButtons.css';\nimport {TOGGLE_DIRECT_MONITOR} from '../../reducers/types';\nlet style = { \n    background: Colors.gray, \n    color: Colors.red, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr\",\n    gridTemplateColumns: \"1fr\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\"\n}\n\nexport default () => {\n    const context = useContext(Context);\n    const renderButtonContent = () => {\n        let content = context.isMonitoring ? \"MUTE\" : \"MON\";\n        return content;\n    }\n    const toggleDirectMonitor = () => {\n        if(!context.monitor) return;\n        let isMonitoring = !context.isMonitoring\n        if(isMonitoring){\n            context.monitor.connect(context.ctx.destination);\n        } else {\n            context.monitor.disconnect();\n        }\n        context.dispatch({type: TOGGLE_DIRECT_MONITOR, payload: {isMonitoring}});\n    }    \n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            <button className=\"editor-btn\" id=\"monitor\" onClick={(e) => { toggleDirectMonitor()}}>\n                {renderButtonContent()}\n            </button>\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {updateEditorData} from '../../actions'\nimport {Context} from '../../contexts/SamplerContext';\nimport Colors from '../../Config/ColorScheme';\n\nlet style = { \n    background: Colors.gray,\n    color: Colors.red, \n    width: \"90%\", \n    textAlign: \"center\",\n    border: `1px solid ${Colors.white}`,\n    display: \"grid\",\n    gridTemplateRows: \"1fr\",\n    gridTemplateColumns: \"1fr\",\n    justifyContent: \"center\",\n    margin: \"1vh auto\"\n}\n\nexport default (props) => {\n    const context = useContext(Context);\n    const renderColorItem = () => {\n        let colorNames = Object.keys(Colors);\n        return colorNames.map((color) => {\n            return (\n                <option id={color} key={color} style={{backgroundColor: Colors[color], color: Colors[color]}}>{color}</option>\n            )\n        })\n    }\n    const updatePadColor = (color) => {\n        updateEditorData({context, cmd: \"color\", val: color})\n    }\n    return (\n        <div className=\"pad-item-wrapper\" style={style}>\n            <select \n            onChange={(e) => {updatePadColor(e.currentTarget.selectedOptions[0].id)}}\n            style={{backgroundColor: context.gridPadsArr[context.selectedPad].color, textAlign: \"center\"}}>\n                <option id=\"current\" key=\"current\" style={{backgroundColor: context.gridPadsArr[context.selectedPad].color}}>Current</option>\n                {renderColorItem()}\n            </select>\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport EditorItemRange from '../PadEditorItem/EditorItemRange';\nimport EditorItemButtons from '../PadEditorItem/EditorItemButtons';\nimport EditorItemButton from '../PadEditorItem/EditorItemButton';\nimport RecordButton from '../PadEditorItem/RecordButton';\nimport MonitorButton from '../PadEditorItem/MonitorButton';\nimport ColorSelector from '../ColorSelector/ColorSelector';\n\nimport './PadEditor.css';\n\nexport default () => {\n    const context = useContext(Context);\n    let selectedPad = context.gridPadsArr[context.selectedPad];\n    let max = 0;\n    let source = context.gridPadsArr[context.selectedPad].source;\n    if(source && source.buffer ){\n        max = source.buffer.duration;\n    }\n    if(context.recMode){\n        return (\n            <div className=\"editor-wrapper\">\n                <EditorItemButtons cmd1=\"prev\" cmd2=\"next\" content1=\"◄\" content2=\"►\" val1={-1} val2={1} />\n                <EditorItemButton cmd=\"play\" content=\"►\" />\n                <RecordButton />\n                <MonitorButton />\n            </div>\n        )\n    } else {\n        return(\n            <div className=\"editor-wrapper\">\n                <EditorItemButtons cmd1=\"prev\" cmd2=\"next\" content1=\"◄\" content2=\"►\" val1={-1} val2={1} />\n                <EditorItemButton cmd=\"play\" content=\"►\" />\n                <EditorItemRange label=\"start\" value={selectedPad.sampleStart} max={max} step={0.001} />\n                <EditorItemRange label=\"end\" value={selectedPad.sampleEnd} max={max} step={0.001} />\n                <EditorItemRange label=\"gain\" value={context.gridPadsArr[context.selectedPad].currentGain} max={1} step={0.01} />\n                <EditorItemRange label=\"detune\" value={context.gridPadsArr[context.selectedPad].detune} step={25} min={0} max={1000} />\n                <ColorSelector />\n                <EditorItemRange label=\"placeholder3\" value={0} />\n            </div>\n        )\n    }\n}\n\n","export default {\n    0: {hold: false},\n    1: {hold: false},\n    2: {hold: false},\n    3: {hold: false},\n    4: {hold: false},\n    5: {hold: false},\n    6: {hold: false},\n    7: {hold: false},\n    8: {hold: false},\n    9: {hold: false},\n    10: {hold: false},\n    11: {hold: false},\n    12: {hold: false},\n    13: {hold: false},\n    14: {hold: false},\n    15: {hold: false},\n}","import React, {useContext} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport {handlePadTrigger} from '../../actions'\nimport Colors from '../../Config/ColorScheme';\nimport touchCTRL from '../../Config/touchControls';\nimport './Pad.css';\n\nexport default (props) => {\n    const context = useContext(Context);\n    let currentPad = context.gridPadsArr[props.id]\n    let borderColor = currentPad.source ? currentPad.color : Colors.gray;\n    let color = props.id === context.selectedPad ? currentPad.color : Colors.black;\n    const handleTouchStart = (padId) => {\n        if(!touchCTRL[padId].hold){\n            touchCTRL[padId].hold = true;\n            handlePadTrigger(context, padId);\n        }\n    }\n    const handleTouchEnd = (padId) => {\n        touchCTRL[padId].hold = false;\n    }\n    const handleMouseClick = (padId) => {\n        if(!context.touchEnabled){\n            handlePadTrigger(context, padId)\n        }\n    }\n    return (\n      <React.Fragment>\n\n    <div\n    className=\"pad\"\n    id={props.id}\n    style={{\n        backgroundColor: color,\n        color: Colors.white,\n        transition: \"0.25s linear\",\n    }}\n    onClick={() => {handleMouseClick(props.id)}}\n    onDoubleClick={(e) => e.preventDefault()}\n    onTouchStart={(e) => {handleTouchStart(props.id, e)}}\n    onTouchEnd={(e) => {handleTouchEnd(props.id, e)}}\n    >\n    <span className=\"pad-text\">{props.midiNote}</span>\n    </div>\n\n    </React.Fragment>\n  );\n}\n","import React, {useContext, useEffect} from 'react';\nimport {Context} from '../../contexts/SamplerContext';\nimport * as types from '../../reducers/types';\nimport GridPad from '../../contexts/Config/PadGrid';\nimport Colors from '../../Config/ColorScheme';\nimport Hud from '../Hud/Hud';\nimport PadEditor from '../PadEditor/PadEditor';\nimport Pad from '../Pad/Pad';\nimport midiMap from '../../Config/midiMap';\nimport './SamplerGrid.css';\n\nconst SamplerGrid = () => {\n    const context = useContext(Context);\n    const gridArr = context.gridPadsArr;\n    const renderPad = (item) => {\n        let backgroundColor = Colors.black\n        let source = context.sources[item.id];\n        const midiNote = midiMap[item.id + 36].note;\n        if(!context.editMode && source && source.buffer) backgroundColor = context.gridPadsArr[context.selectedPad].color;\n        if(context.editMode && source && source.buffer) backgroundColor = Colors.green;\n        return <Pad\n        midiNote={midiNote}\n        key={item.id}\n        id={item.id}\n        name={item.name}\n        backgroundColor={backgroundColor}\n        />\n    }\n    const rendercontent = () => {\n        if(!context.editMode) return <div>{gridArr.map((item) => { return renderPad(item) })}</div>\n        return <PadEditor />\n    }\n    const testForTouchDevice = () => {\n        return 'ontouchstart' in window;\n    }\n    const testForMidiAPI = () => {\n        return \"requestMIDIAccess\" in navigator;\n    }\n    const generateGrid = () => {\n        let midiEnabled = testForMidiAPI();\n        let touchEnabled = testForTouchDevice();\n        let gridPadsArr = [];\n        for(let i = 0; i < context.numPads; i++){\n            let newPad = new GridPad({id: i})\n            gridPadsArr.push(newPad)\n        }\n        let payload = {gridPadsArr, touchEnabled, midiEnabled}\n        context.dispatch({ type: types.GENERATE_GRID, payload })\n    }\n    useEffect(() => {\n        if(context.gridPadsArr.length < 1) generateGrid();\n    }, []);\n    return (\n        <div\n        className=\"grid-wrapper\"\n        \n        >\n        <Hud />\n            <div className=\"grid\">\n                {rendercontent()}\n            </div>\n        </div>\n    )\n}\n\nexport default SamplerGrid\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SamplerContextStore} from './contexts/SamplerContext';\nimport App from './components/App/App';\n\n// const path = require(\"path\");\n// const express = require('express');\n// const app = express();\n//\n// const server = require(\"http\").Server(app);\n//\n// app.use(express.static(\"public\"));\n\nReactDOM.render(\n    <SamplerContextStore>\n      <App />\n    </SamplerContextStore>,\n    document.getElementById('root')\n  );\n\n  // server.listen(8080, function() {\n  //     console.log(\"I'm listening.\");\n  // });\n","import React, { useContext } from \"react\";\nimport { Context } from \"../../contexts/SamplerContext\";\nimport { handlePadTrigger } from \"../../actions\";\nimport keyCTRL from \"../../Config/keyboardControls\";\nimport StartScreen from '../StartScreen/StartScreen';\nimport SamplerGrid from \"../SamplerGrid/SamplerGrid\";\nimport \"./App.css\";\n\nexport default function App() {\n  const context = useContext(Context);\n  const renderAppContent = () => {\n      if(!context.ctx) return <StartScreen />\n    return (\n      <div className=\"app-wrapper\">\n        <SamplerGrid />\n      </div>\n    );\n  };\n  const handleKeyDown = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    let keyTrigger = keyCTRL[e.which];\n    if (keyTrigger && !keyTrigger.hold && !e.repeat) {\n      keyCTRL[e.which].hold = true;\n      handlePadTrigger(context, keyTrigger.padId);\n    }\n  };\n  const handleKeyUp = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    let keyTrigger = keyCTRL[e.which];\n    if (keyTrigger && keyTrigger.hold) {\n      keyCTRL[e.which].hold = false;\n    }\n  };\n  return (\n    <React.Fragment>\n      <div id=\"body-wrapper\">\n        <header></header>\n        <div className=\"box\"></div>\n\n        <div className=\"video-wrapper\">\n          <iframe\n            className=\"video\"\n            src=\"https://www.youtube.com/embed/vFNbj8KI0Rc?start=3&controls=0&showinfo=0&loop=1&modestbranding=1\"\n            frameborder=\"0\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture;\"\n          ></iframe>\n        </div>\n\n        <iframe\n          className=\"music-player\"\n          src=\"https://bandcamp.com/EmbeddedPlayer/album=3937120203/size=large/bgcol=ffffff/linkcol=333333/tracklist=false/transparent=true/\"\n          seamless\n        >\n          <a href=\"http://algernoncornelius.bandcamp.com/album/in2trumentals\">\n            In2trumentals by Algernon Cornelius\n          </a>\n        </iframe>\n\n        <div\n          className=\"mpc-wrapper\"\n          onKeyDown={e => {\n            handleKeyDown(e);\n          }}\n          onKeyUp={e => {\n            handleKeyUp(e);\n          }}\n          tabIndex=\"0\"\n        >\n          {renderAppContent()}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n"],"sourceRoot":""}